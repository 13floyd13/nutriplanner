# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up JDK 17
#       uses: actions/setup-java@v3
#       with:
#         java-version: '17'
#         distribution: 'temurin'
#         cache: maven
#     - name: Build with Maven
#       run: mvn -B package --file pom.xml
      
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

#     - name: Checkout badges branch to a badges directory nested inside first checkout
#       uses: actions/checkout@v3
#       with:
#         ref: badges
#         path: badges

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Build with Maven
      run: mvn -B package -Pcoverage

#     - name: Generate JaCoCo badge
#       id: jacoco
#       uses: cicirello/jacoco-badge-generator@v2
#       with:
#         badges-directory: badges
#         generate-branches-badge: true
#         generate-summary: true

#     - name: Log coverage percentages to workflow output
#       run: |
#         echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
#         echo "branches = ${{ steps.jacoco.outputs.branches }}"
    - name: Display structure of target/site/
      run: ls -R target/


    - name: Upload JaCoCo coverage report as a workflow artifact
      uses: actions/upload-artifact@v3
      with:
        name: jacoco-report
        path: target/site/jacoco/

#     - name: Commit and push the coverage badges and summary file
#       if: ${{ github.event_name != 'pull_request' }}
#       run: |
#         cd badges
#         if [[ `git status --porcelain *.svg *.json` ]]; then
#           git config --global user.name 'github-actions'
#           git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
#           git add *.svg *.json
#           git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
#           git push
#         fi

#     - name: Comment on PR with coverage percentages
#       if: ${{ github.event_name == 'pull_request' }}
#       run: |
#         REPORT=$(<badges/coverage-summary.json)
#         COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
#         BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
#         NEWLINE=$'\n'
#         BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
#         gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
#       continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      
#   sonar:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: 'temurin'
#       - name: Cache SonarQube packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache Maven packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.m2
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-m2
#       - name: Build and analyze
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#         run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=nutriplanner -Dsonar.projectName='nutriplanner'

